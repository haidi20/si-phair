const http = require('http');
const cors = require('cors');
const moment = require('moment');
const express = require('express');
const { Server } = require("socket.io");
const bodyParser = require('body-parser');

const JobOrder = require('./models/jobOrder');
const Notification = require('./models/notification');

const socketioModule = require('./socketioModule');
const NotificationController = require("./controllers/NotificationController");
const { updateOrCreate } = require("./utils");
const Project = require('./models/project');
const { includes } = require('lodash');

const app = express();
const server = http.createServer(app);
// const io = socketIo(server);

app.use(cors());
app.use(bodyParser.json());

const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
    },
});

let userSocket = new Set();

io.on('connection', async (socket) => {
    console.log('a user connected');

    const notifController = NotificationController;
    // const now = moment().format('YYYY-MM-DD HH:mm:ss');
    const now = moment().set({ date: 27, hour: 22 }).format('YYYY-MM-DD HH:mm:ss');
    const userId = socket.handshake.query.user_id;

    userSocket.add(socket.id);

    // setInterval(async () => {
    await notifController.store(now, userId).then(async (process) => {
        if (process) {
            let notifications = await Notification.findAll({
                where: {
                    // is_show: false,
                    user_id: userId,
                },
                limit: 5,
                include: {
                    as: 'parent',
                    model: JobOrder,
                    attributes: [
                        'id', 'created_by', 'status', 'project_id',
                    ],
                    where: {
                        created_by: userId,
                    },
                },
                order: [['created_at', 'DESC']],
            });
            io.emit('get-notification', {
                data: notifications,
                now: now,
                userId: `user id = ${userId}`,
            });
        }
    }).catch(error => {
        // handle error
        console.log(error);
    });
    // }, 5000);

    // socket.on('notification', (message) => {
    //     console.log('message: ' + message);
    //     io.emit('send-notification', {
    //         message,
    //         user_id: userId,
    //     });
    // });

    socket.on('disconnect', () => {
        userSocket.delete(socket.id);

        console.log('user disconnected');
    });
});

socketioModule.setIo(io);

// Express route for sending a message
app.post('/notification',
    (req, res) => NotificationController.sendMessage(req, res));

server.listen(3000, () => {
    console.log('listening on *:3000');
});
